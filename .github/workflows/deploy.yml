name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main  # Change to your deployment branch if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-1 | \
          docker login --username AWS --password-stdin 061747058342.dkr.ecr.ap-southeast-1.amazonaws.com

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names name || \
          aws ecr create-repository --repository-name name

      - name: Build, tag, and push Docker image
        env:
          IMAGE_NAME: product
          IMAGE_TAG: latest
          ECR_URI: 061747058342.dkr.ecr.ap-southeast-1.amazonaws.com/name
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG
          
      - name: SSH into EC2 and deploy Docker container
        name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main  # Change to your deployment branch if needed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-1 | \
          docker login --username AWS --password-stdin 061747058342.dkr.ecr.ap-southeast-1.amazonaws.com

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names name || \
          aws ecr create-repository --repository-name name

      - name: Build, tag, and push Docker image
        env:
          IMAGE_NAME: product
          IMAGE_TAG: latest
          ECR_URI: 061747058342.dkr.ecr.ap-southeast-1.amazonaws.com/name
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG
          
      - name: SSH into EC2 and deploy Docker container
        env:
          EC2_HOST: 13.275.174.99
          EC2_USER: ubuntu
          AWS_REGION: ap-southeast-1
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          cat << 'EOF' > key.pem
         -----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA2x6Bpsen3XNv0GpgZHxHC4AgkqMmzCQ7uIRGcQafQxMjtIAp
+SWd3hZU85bnjv6earA+26+ibrvnF4b+cEoaZxQBR8Hy5dw6oz4OPTMDzpWrng7y
fdk7ACoGMMXp12LOCvAHw3VaopwmSFoeep/S8pmTtxR39q1KIowZGslueaIpBeeC
6CK+mPUN/MZNlWBrYEVQHvCRBrK6o9Fw+3OYV9g6iDsFma8xMZaK6T3F1Dta8t7O
BpGaigwX2z047ygduQKwohoW/J1K9vvRgAddvVHcNP9I4EHcjlb06LCSVOiSezNM
d3KgdO5r+owC1dTslq1ErXjTE3gJXqMZRwSPhwIDAQABAoIBABuKOQdqPqnxsVMD
m7vldtR2NSHZCa5Mu4jUbzoTd/7pL+qm1R+wX6gjLGg1RkNNs0F7h1r7NzItwbzO
Rbp9RdZAyGxpbwr+5AvSZ92/RLI5U4mZHVc971F09rQ4m8xrabQsOP2TCWI4uAMN
+Ji27794F/3Bv9YsL44qB5m7SXxV7q0AOkhV5/xcHl3S/kiLV1iUYJNkGdKo5z+1
8omnacMtrFWPQVTKXhbZd98ssS8Gb9TCLYYImWD3SuUUjWuRPS8676TpiaMQOYLh
rEFtIMgaXLIjbREqSLn+0JXzW6ceW/sUkwtrUfdkdH88fCZxjDqikk/3w9Dv8BuY
qxHnKRECgYEA+duC4WyPPrACLwKCfrBUpAwXkWM5O25USVznG/gw4S46ZjwPqml2
mNzotH10yMtN2QssWDWwURWMIWmANn8YaBLf1ExpnZ0XCK0/JSiR34mBk62uPAFM
vtBX2LewB1uLeqzAgU6fUG3sxHfiZDrMmJPYlvv/4sIgG6XZ3LlOiNkCgYEA4IGK
2XhWiw8kU56xs39F5nkEJ/mS7xJ08lx6cF/4u95EThcJW97lXlSBntTQxzbf7iXq
5DP0+ncO/muKJfUnRn6xXPILJXiz9Wz5pYBJAxcXhfTt7pzHXvAUWaxrb9O57Hfg
GHQubNDSerwY/uQz2W2/606Dezhk+wHUT6ZJn18CgYEAzPRKjR2e9z4r3GIDp2Z/
V73vizxIUz7ydud1UJUri1t/XiOAejpepY/4dy2+IYPbjOHEc2s/AZRaSYIgQRPK
cnyhDKXNsROONHjgplt8JVDHcNt0ZBZw3MlMdiJfi/mFFZElrCxRNQmmwZbRp4Qw
FiyY62k1gs3YxrUqXAvJpykCgYBR/Fy1cDHClKQCeXiRgVAIi3cOFiEnd0kH3OfF
s/aEvPWawuTjDPIcUaYIV9VqesqqEGTIM4UqFmJ+XM1VcUKHhurEc4vIglzNqp88
Zi3DmCI6BCkDs3NHY0s7ODD/5IUIKvrGU19E07mZoqlKJBIfO+oTR1fSntSZqaBb
+fD25wKBgQCMdplLlKrsV7OqlWSwCIeMKAa3VnTokSYwcmUT7E+lIdpbOHfkZbpK
fcVEvqzw0NimpvylmcK8C3wqF8zH5s+Zi5IACh5vk1i5VgGMrxdJJhTdkN5WLz5l
QwZVGxuakttBch86sQslc/eO4gyjHnJBUsLCbWDbiNFAZcUh+n9+Qw==
-----END RSA PRIVATE KEY-----
          EOF
          chmod 600 key.pem

          ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST << EOF
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull $IMAGE_URI
            docker stop cosmetics-container || true
            docker rm cosmetics-container || true
            docker run -d --name cosmetics-container -p 80:80 $IMAGE_URI
          EOF


      # - name: Deploy to ECS
      #   run: |
      #     FAMILY_NAME=slt-family
      #     CLUSTER_NAME=slit
      #     SERVICE_NAME=service-1
      #     CONTAINER_NAME=catalog
      #     REGION=ap-southeast-1
      #     IMAGE_URI=061747058342.dkr.ecr.ap-southeast-1.amazonaws.com/name:latest

          
      #     # Save current task definition to a file
      #     aws ecs describe-task-definition \
      #       --task-definition $FAMILY_NAME \
      #       --region $REGION > old-task-def.json
          
      #     # Extract and update the task definition JSON
      #     jq --arg IMAGE "$IMAGE_URI" --arg CONTAINER "$CONTAINER_NAME" '
      #       .taskDefinition |
      #       {
      #         family: .family,
      #         executionRoleArn: .executionRoleArn,
      #         networkMode: .networkMode,
      #         containerDefinitions: [.containerDefinitions[] | if .name == $CONTAINER then (.image = $IMAGE) else . end],
      #         requiresCompatibilities: .requiresCompatibilities,
      #         cpu: .cpu,
      #         memory: .memory
      #       }
      #     ' old-task-def.json > new-task-def.json
          
      #     # Register the new task definition
      #     NEW_REVISION=$(aws ecs register-task-definition \
      #       --region $REGION \
      #       --cli-input-json file://new-task-def.json \
      #       | jq -r '.taskDefinition.taskDefinitionArn')
          
      #     # Update the ECS service to use the new revision
      #     aws ecs update-service \
      #       --cluster $CLUSTER_NAME \
      #       --service $SERVICE_NAME \
      #       --region $REGION \
      #       --task-definition $NEW_REVISION
